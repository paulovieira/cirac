
// the NODE_ENV env variables should be defined before the node process is started; 
// if not defined we use the following defaults;
process.env.NODE_ENV = process.env.NODE_ENV || "production";

// the above env variables must be defined before the config module is first required
var Config = require("config");
//var Hapi = require("hapi");
var Glue = require("glue");
var Hoek = require("hoek");
var Utils = require("./common/utils");
//var Plugins = require("./common/external-plugins");
var WebPlugin = require("./web");

internals = {};
/*
internals.init = function(){

    // add custom filters and globals to the nunjucks template engine
    Utils.configureNunjucks();
//    var defaultServerOptions = JSON.parse(JSON.stringify(Config.get("hapi.server")));

    //var server = new Hapi.Server(defaultServerOptions);
	// server.connection({
 //    	port: Config.get("port")
	// });

    // 1) register the external plugins
    var externalPlugins = [Plugins.tilelive];
    
    if(process.env.NODE_ENV!=="production"){
        externalPlugins.push(Plugins.good);
    }
    
	server.register(externalPlugins, function(err) {

	    Hoek.assert(!err, 'Failed registration of external plugins: ' + err);

        // 2) register the web plugin (routes, etc)
		server.register([WebPlugin], function(err){

	    	Hoek.assert(!err, 'Failed registration of internal plugins: ' + err);

            // 3) start the server and finish the initialization process
	    	server.start(function(err) {

		    	Hoek.assert(!err, 'Failed start server: ' + err);
		    	Utils.registerServer(server);

                console.log('Server started at: ' + server.info.uri);
		    });
		});    
	});
};
*/
//internals.init();




var manifest = {

    server: {
        //  default connections configuration
        connections: {

            // controls how incoming request URIs are matched against the routing table
            router: {
                isCaseSensitive: false,
                stripTrailingSlash: true
            },

            // default configuration for every route.
            routes: {
                state: {
                    // determines how to handle cookie parsing errors ("ignore" = take no action)
                    failAction: "ignore"
                },

                // disable node socket timeouts (useful for debugging)
                timeout: {
                    server: false,
                    socket: false
                }
            }
        },

    },

    connections: [
        {
            host: "localhost",
            port: Config.get("port")
        }
    ],

    plugins: [

        {
            "good": {
                reporters: [{
                    reporter: require("good-console"),
                    events: {
                        //ops: "*",
                        log: "*", // maps to the "log" event 
                        response: "*", // maps to either the "response" or "tail" event
                        error: "*", // maps to the "request-error" event
                        request: "*" // maps to the hapi "request" event (generated by request.log())
                    }
                }]
            }
        },

        {
            "blipp": {
                showAuth: true
            }
        },

        {
            "inert": {

            }
        },

        {
            "vision": {

            }
        },

        {
            "hapi-tilelive": {
                source: Config.get("tilesDir"),
                routePath: "/tiles/{mapId}/{z}/{x}/{y}"
            }
        },

        // dependencies: ["vision", "inert"]
        {   
            "./web": {

            }
        }


    ]
};

// TODO: remove good console if not in production
// TODO: migrato to hapi 9
var options = {
    relativeTo: __dirname,
    prePlugins: function(server, next){
        next();
    }
};

Glue.compose(manifest, options, function (err, server) {

    Hoek.assert(!err, 'Failed registration of one or more plugins: ' + err);

    Utils.configureNunjucks2(server);

    // start the server and finish the initialization process
    server.start(function(err) {

        Hoek.assert(!err, 'Failed start server: ' + err);

        Utils.registerServer(server);

        
        console.log('Server started at: ' + server.info.uri);
        console.log("Hapi version: " + server.version);
    });
});
